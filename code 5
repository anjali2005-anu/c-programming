#include <stdio.h>
#include <string.h>
#include <ctype.h>

char keywords[32][10] = {
    "auto","break","case","char","const","continue","default","do","double",
    "else","enum","extern","float","for","goto","if","int","long","register",
    "return","short","signed","sizeof","static","struct","switch","typedef",
    "union","unsigned","void","volatile","while"
};

int isKeyword(char *word) {
    for (int i = 0; i < 32; i++) {
        if (strcmp(keywords[i], word) == 0)
            return 1;
    }
    return 0;
}

int isOperator(char ch) {
    char ops[] = "+-*/%=<>&|!";
    for (int i = 0; i < strlen(ops); i++) {
        if (ch == ops[i])
            return 1;
    }
    return 0;
}

void lexicalAnalyzer(const char *filename) {
    FILE *fp = fopen(filename, "r");
    char ch, buffer[50];
    int i = 0;

    if (!fp) {
        printf("Error opening file.\n");
        return;
    }

    printf("Lexical Analysis:\n");

    while ((ch = fgetc(fp)) != EOF) {
        // If alphanumeric or _, build identifier/keyword
        if (isalnum(ch) || ch == '_') {
            buffer[i++] = ch;
        } else {
            buffer[i] = '\0';
            i = 0;

            // If word found
            if (strlen(buffer) > 0) {
                if (isKeyword(buffer))
                    printf("[Keyword]    %s\n", buffer);
                else
                    printf("[Identifier] %s\n", buffer);
            }

            // Check for operators
            if (isOperator(ch)) {
                char next = fgetc(fp);
                if ((ch == '=' && next == '=') || (ch == '!' && next == '=')) {
                    printf("[Operator]   %c%c\n", ch, next);
                } else {
                    printf("[Operator]   %c\n", ch);
                    ungetc(next, fp);
                }
            }
        }
    }

    fclose(fp);
}

int main() {
    lexicalAnalyzer("input.c");
    return 0;
}
