#ifndef LINKED_LIST_H
#define LINKED_LIST_H

// Node definition
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function declarations
Node* createNode(int data);
void insertAtBeginning(Node** head, int data);
void insertAtEnd(Node** head, int data);
void insertAtPosition(Node** head, int data, int position);
void deleteNode(Node** head, int data);
void printList(Node* head);
void freeList(Node** head);

#endif

#include <stdio.h>
#include <stdlib.h>


// Create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        perror("Memory allocation failed");
        exit(EXIT_FAILURE);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Insert at the beginning
void insertAtBeginning(Node** head, int data) {
    Node* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}

// Insert at the end
void insertAtEnd(Node** head, int data) {
    Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    Node* temp = *head;
    while (temp->next) temp = temp->next;
    temp->next = newNode;
}

// Insert at a specific position (1-based)
void insertAtPosition(Node** head, int data, int position) {
    if (position < 1) {
        printf("Invalid position.\n");
        return;
    }
    if (position == 1) {
        insertAtBeginning(head, data);
        return;
    }
    Node* temp = *head;
    for (int i = 1; temp && i < position - 1; i++) {
        temp = temp->next;
    }
    if (!temp) {
        printf("Position out of range.\n");
        return;
    }
    Node* newNode = createNode(data);
    newNode->next = temp->next;
    temp->next = newNode;
}

// Delete node by value
void deleteNode(Node** head, int data) {
    Node* temp = *head, *prev = NULL;

    while (temp && temp->data != data) {
        prev = temp;
        temp = temp->next;
    }

    if (!temp) {
        printf("Value %d not found.\n", data);
        return;
    }

    if (!prev)
        *head = temp->next;
    else
        prev->next = temp->next;

    free(temp);
    printf("Deleted %d from the list.\n", data);
}

// Print the list
void printList(Node* head) {
    if (!head) {
        printf("List is empty.\n");
        return;
    }
    printf("List: ");
    while (head) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

// Free all nodes
void freeList(Node** head) {
    Node* current = *head;
    Node* nextNode;
    while (current) {
        nextNode = current->next;
        free(current);
        current = nextNode;
    }
    *head = NULL;
}
 

#include <stdio.h>

int main() {
    Node* head = NULL;
    int choice, value, pos;

    while (1) {
        printf("\n--- Menu ---\n");
        printf("1. Insert at Beginning\n2. Insert at End\n3. Insert at Position\n");
        printf("4. Delete by Value\n5. Display List\n6. Exit\n");
        printf("Choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Value: ");
                scanf("%d", &value);
                insertAtBeginning(&head, value);
                break;
            case 2:
                printf("Value: ");
                scanf("%d", &value);
                insertAtEnd(&head, value);
                break;
            case 3:
                printf("Value and Position: ");
                scanf("%d %d", &value, &pos);
                insertAtPosition(&head, value, pos);
                break;
            case 4:
                printf("Value to delete: ");
                scanf("%d", &value);
                deleteNode(&head, value);
                break;
            case 5:
                printList(head);
                break;
            case 6:
                freeList(&head);
                return 0;
            default:
                printf("Invalid choice.\n");
        }
    }
}


