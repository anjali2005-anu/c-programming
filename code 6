#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Check if a string is a keyword
int isKeyword(char *word) {
    const char *keywords[] = {
        "int", "float", "return", "if", "else", "while", "for", "char", "double", "void"
    };
    for (int i = 0; i < 10; i++) {
        if (strcmp(word, keywords[i]) == 0)
            return 1;
    }
    return 0;
}

// Main lexical analyzer function
void lexicalAnalyzer(char *code) {
    char token[100];
    int i = 0, j = 0;
    while (code[i] != '\0') {
        // Skip whitespace
        if (isspace(code[i])) {
            i++;
            continue;
        }

        // Identifier or keyword
        if (isalpha(code[i]) || code[i] == '_') {
            j = 0;
            while (isalnum(code[i]) || code[i] == '_') {
                token[j++] = code[i++];
            }
            token[j] = '\0';
            if (isKeyword(token))
                printf("Keyword: %s\n", token);
            else
                printf("Identifier: %s\n", token);
        }
        // Number
        else if (isdigit(code[i])) {
            j = 0;
            while (isdigit(code[i])) {
                token[j++] = code[i++];
            }
            token[j] = '\0';
            printf("Number: %s\n", token);
        }
        // Operators
        else if (strchr("+-*/=<>!&|", code[i])) {
            token[0] = code[i];
            token[1] = '\0';
            // Handle two-character operators like ==
            if ((code[i] == '=' || code[i] == '!' || code[i] == '<' || code[i] == '>') && code[i+1] == '=') {
                token[1] = '=';
                token[2] = '\0';
                i += 2;
            } else {
                i++;
            }
            printf("Operator: %s\n", token);
        }
        // Delimiters
        else if (strchr("();{},", code[i])) {
            printf("Delimiter: %c\n", code[i]);
            i++;
        }
        // Unknown characters
        else {
            printf("Unknown character: %c\n", code[i]);
            i++;
        }
    }
}

int main() {
    char code[256];
    printf("Enter a line of code: ");
    fgets(code, sizeof(code), stdin);
    lexicalAnalyzer(code);
    return 0;
}
